{"ast":null,"code":"export default function slideToLoop(index, speed, runCallbacks, internal) {\n  if (index === void 0) {\n    index = 0;\n  }\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n  if (typeof index === 'string') {\n    /**\r\n     * The `index` argument converted from `string` to `number`.\r\n     * @type {number}\r\n     */\n    var indexAsNumber = parseInt(index, 10);\n    /**\r\n     * Determines whether the `index` argument is a valid `number`\r\n     * after being converted from the `string` type.\r\n     * @type {boolean}\r\n     */\n\n    var isValidNumber = isFinite(indexAsNumber);\n    if (!isValidNumber) {\n      throw new Error(\"The passed-in 'index' (string) couldn't be converted to 'number'. [\".concat(index, \"] given.\"));\n    } // Knowing that the converted `index` is a valid number,\n    // we can update the original argument's value.\n\n    index = indexAsNumber;\n  }\n  var swiper = this;\n  var newIndex = index;\n  if (swiper.params.loop) {\n    newIndex += swiper.loopedSlides;\n  }\n  return swiper.slideTo(newIndex, speed, runCallbacks, internal);\n}","map":{"version":3,"names":["slideToLoop","index","speed","runCallbacks","internal","params","indexAsNumber","parseInt","isValidNumber","isFinite","Error","concat","swiper","newIndex","loop","loopedSlides","slideTo"],"sources":["C:/Users/Asus/OneDrive/Desktop/webbanhanggom/node_modules/swiper/core/slide/slideToLoop.js"],"sourcesContent":["export default function slideToLoop(index, speed, runCallbacks, internal) {\n  if (index === void 0) {\n    index = 0;\n  }\n\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  if (typeof index === 'string') {\n    /**\r\n     * The `index` argument converted from `string` to `number`.\r\n     * @type {number}\r\n     */\n    const indexAsNumber = parseInt(index, 10);\n    /**\r\n     * Determines whether the `index` argument is a valid `number`\r\n     * after being converted from the `string` type.\r\n     * @type {boolean}\r\n     */\n\n    const isValidNumber = isFinite(indexAsNumber);\n\n    if (!isValidNumber) {\n      throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index}] given.`);\n    } // Knowing that the converted `index` is a valid number,\n    // we can update the original argument's value.\n\n\n    index = indexAsNumber;\n  }\n\n  const swiper = this;\n  let newIndex = index;\n\n  if (swiper.params.loop) {\n    newIndex += swiper.loopedSlides;\n  }\n\n  return swiper.slideTo(newIndex, speed, runCallbacks, internal);\n}"],"mappings":"AAAA,eAAe,SAASA,WAAWA,CAACC,KAAK,EAAEC,KAAK,EAAEC,YAAY,EAAEC,QAAQ,EAAE;EACxE,IAAIH,KAAK,KAAK,KAAK,CAAC,EAAE;IACpBA,KAAK,GAAG,CAAC;EACX;EAEA,IAAIC,KAAK,KAAK,KAAK,CAAC,EAAE;IACpBA,KAAK,GAAG,IAAI,CAACG,MAAM,CAACH,KAAK;EAC3B;EAEA,IAAIC,YAAY,KAAK,KAAK,CAAC,EAAE;IAC3BA,YAAY,GAAG,IAAI;EACrB;EAEA,IAAI,OAAOF,KAAK,KAAK,QAAQ,EAAE;IAC7B;AACJ;AACA;AACA;IACI,IAAMK,aAAa,GAAGC,QAAQ,CAACN,KAAK,EAAE,EAAE,CAAC;IACzC;AACJ;AACA;AACA;AACA;;IAEI,IAAMO,aAAa,GAAGC,QAAQ,CAACH,aAAa,CAAC;IAE7C,IAAI,CAACE,aAAa,EAAE;MAClB,MAAM,IAAIE,KAAK,uEAAAC,MAAA,CAAuEV,KAAK,aAAU,CAAC;IACxG,CAAC,CAAC;IACF;;IAGAA,KAAK,GAAGK,aAAa;EACvB;EAEA,IAAMM,MAAM,GAAG,IAAI;EACnB,IAAIC,QAAQ,GAAGZ,KAAK;EAEpB,IAAIW,MAAM,CAACP,MAAM,CAACS,IAAI,EAAE;IACtBD,QAAQ,IAAID,MAAM,CAACG,YAAY;EACjC;EAEA,OAAOH,MAAM,CAACI,OAAO,CAACH,QAAQ,EAAEX,KAAK,EAAEC,YAAY,EAAEC,QAAQ,CAAC;AAChE"},"metadata":{},"sourceType":"module","externalDependencies":[]}